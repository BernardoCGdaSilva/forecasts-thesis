}
a <- day_to_month(selic_diario)
day_to_month <- function(base){
nome_coluna <- colnames(base)[2]
x <- base %>%
mutate(mes = lubridate::floor_date(data, "month")) %>%
group_by(mes) %>%
summarise(valor = last(enexpr(nome_coluna)))
return(x)
}
a <- day_to_month(selic_diario)
View(a)
selic_mensal <- selic_diario %>%
mutate(mes = lubridate::floor_date(data, "month")) %>%
group_by(data) %>%
summarise(valor1 = last(exprs(colnames(selic_diario)[2])))
selic_mensal <- selic_diario %>%
mutate(mes = lubridate::floor_date(data, "month")) %>%
group_by(data) %>%
summarise(valor1 = last(rlang::exprs(colnames(selic_diario)[2])))
rlang::exprs(colnames(selic_diario)[2]))
rlang::exprs(colnames(selic_diario)[2])
selic_mensal <- selic_diario %>%
mutate(mes = lubridate::floor_date(data, "month")) %>%
group_by(data) %>%
summarise(valor1 = last(!!colnames(selic_diario)[2]))
View(selic_mensal)
selic_mensal <- selic_diario %>%
mutate(mes = lubridate::floor_date(data, "month")) %>%
group_by(data) %>%
summarise(valor1 = last(deparse(substitute(colnames(selic_diario)[2]))))
View(selic_mensal)
selic_mensal <- selic_diario %>%
mutate(mes = lubridate::floor_date(data, "month")) %>%
group_by(data) %>%
summarise(valor1 = last(substitute(colnames(selic_diario)[2])))
View(selic_mensal)
substitute(colnames(selic_diario)[2]))
substitute(colnames(selic_diario)[2])
selic_mensal <- selic_diario %>%
mutate(mes = lubridate::floor_date(data, "month")) %>%
group_by(data) %>%
summarise(valor1 = last(.[[colnames(selic_diario)[2]]]))
selic_mensal <- selic_diario %>%
mutate(mes = lubridate::floor_date(data, "month")) %>%
group_by(data) %>%
summarise(valor1 = last(.[,colnames(selic_diario)[2]]])
selic_mensal <- selic_diario %>%
mutate(mes = lubridate::floor_date(data, "month")) %>%
group_by(data) %>%
summarise(valor1 = last(.[,colnames(selic_diario)[2]]))
View(selic_mensal)
selic_mensal <- selic_diario %>%
mutate(mes = lubridate::floor_date(data, "month")) %>%
group_by(data) %>%
summarise(valor1 = last(selic_diario))
View(selic_mensal)
painel <- reduce(list(dolar_compra_mensal, dolar_venda_mensal, M1_mensal,inflacao_mensal, selic_mensal, pib_mensal),full_join, by = "data")
painel <- painel[rowSums(is.na(painel)) == 0,]
View(painel)
selic_mensal <- selic_diario %>%
mutate(mes = lubridate::floor_date(data, "month")) %>%
group_by(data) %>%
summarise(selic_mensal = last(selic_diario))
painel <- reduce(list(dolar_compra_mensal, dolar_venda_mensal, M1_mensal,inflacao_mensal, selic_mensal, pib_mensal),full_join, by = "data")
painel <- painel[rowSums(is.na(painel)) == 0,]
View(painel)
a <- lm(painel[,-1])
painel[,-1]
painel[,-2]
painel[,-c(1,2)]
a <- lm(painel[,-c(1,2)], dolar_venda_mensal  ~.)
a <- lm(data = painel[,-c(1,2)], formula = dolar_venda_mensal  ~.)
summary(a)
plot(a)
log(painel)
log(painel$dolar_venda_mensal)
log(painel[,-1])
log(painel$inflacao_mensal)
painel$inflacao_mensal
a <- lm(data = log(painel[,-c(1,2)]), formula = dolar_venda_mensal  ~.)
summary(a)
View(painel)
# TCC forecast
# Bernardo Cainelli Gomes da Silva
# Nov - 2022
# _________________________________________________________________________________
# _____________________________ HELPER FUNCTIONS __________________________________
# _________________________________________________________________________________
source("functions.R")
# TCC forecast
# Bernardo Cainelli Gomes da Silva
# Nov - 2022
# _________________________________________________________________________________
# _____________________________ HELPER FUNCTIONS __________________________________
# _________________________________________________________________________________
source("00_functions.R")
# _________________________________________________________________________________
# __________________________________ DATA _________________________________________
# _________________________________________________________________________________
# get data
#dolar_compra_diario <- get_sgs("http://api.bcb.gov.br/dados/serie/bcdata.sgs.10813/dados?formato=json","dolar_compra_diario")#, "dolar_compra")
#dolar_venda_diario <- get_sgs("http://api.bcb.gov.br/dados/serie/bcdata.sgs.1/dados?formato=json","dolar_venda_diario")#, "dolar_venda")
dolar_compra_mensal <- get_sgs("http://api.bcb.gov.br/dados/serie/bcdata.sgs.3695/dados?formato=json", "dolar_compra_mensal")
dolar_venda_mensal <- get_sgs("http://api.bcb.gov.br/dados/serie/bcdata.sgs.3695/dados?formato=json", "dolar_venda_mensal")
#M1_diario <- get_sgs("http://api.bcb.gov.br/dados/serie/bcdata.sgs.27785/dados?formato=json","M1_diario")#, "base_monetaria_m1")
M1_mensal <- get_sgs("http://api.bcb.gov.br/dados/serie/bcdata.sgs.27791/dados?formato=json", "M1_mensal")
#M1_defasado_diario <- get_sgs("http://api.bcb.gov.br/dados/serie/bcdata.sgs.1821/dados?formato=json", "base_monetaria_m1")
inflacao_mensal <- get_sgs("http://api.bcb.gov.br/dados/serie/bcdata.sgs.433/dados?formato=json", "inflacao_mensal")#, "ipca")
selic_diario <- get_sgs("http://api.bcb.gov.br/dados/serie/bcdata.sgs.432/dados?formato=json", "selic_diario")
pib_mensal <- get_sgs("http://api.bcb.gov.br/dados/serie/bcdata.sgs.4380/dados?formato=json", "pib_mensal")
# Daily data to monthly data: last value
selic_mensal <- selic_diario %>%
mutate(mes = lubridate::floor_date(data, "month")) %>%
group_by(data) %>%
summarise(selic_mensal = last(selic_diario))
View(selic_diario)
selic_diario %>%
mutate(mes = lubridate::floor_date(data, "month"))
View(selic_mensal)
selic_mensal <- selic_diario %>%
mutate(mes = lubridate::floor_date(data, "month")) %>%
group_by(mes) %>%
summarise(selic_mensal = last(selic_diario))
View(selic_mensal)
View(selic_diario)
View(dolar_compra_mensal)
# Convert from dail to monthly and keeps last daily value
day_to_month <- function(base){
nome_coluna <- colnames(base)[2]
x <- base %>%
mutate(mes = lubridate::floor_date(data, "month")) %>%
group_by(mes) %>%
summarise(valor = last(enexpr(nome_coluna)))
return(x)
}
day_to_month(selic_diario)
View(selic_mensal)
painel <- reduce(list(dolar_compra_mensal, dolar_venda_mensal, M1_mensal,inflacao_mensal, selic_mensal, pib_mensal),full_join, by = "data")
painel <- painel[rowSums(is.na(painel)) == 0,]
painel <- reduce(list(dolar_compra_mensal, dolar_venda_mensal, M1_mensal,inflacao_mensal, selic_mensal, pib_mensal),full_join, by = "data")
colnames(selic_mensal[2])
colnames(selic_mensal) <- ("data",colnames(selic_mensal[2]))
colnames(selic_mensal) <- c("data", colnames(selic_mensal[2]))
painel <- reduce(list(dolar_compra_mensal, dolar_venda_mensal, M1_mensal,inflacao_mensal, selic_mensal, pib_mensal),full_join, by = "data")
painel <- painel[rowSums(is.na(painel)) == 0,]
View(painel)
colnames(selic_diario)[2]
colnames(selic_diario[2])
colnames(selic_diario[2]) %>% str()
colnames(selic_diario)[2] %>% str()
# Convert from dail to monthly and keeps last daily value
day_to_month <- function(base){
nome_coluna <- colnames(base)[2]
x <- base %>%
mutate(mes = lubridate::floor_date(data, "month")) %>%
group_by(mes) %>%
summarise(valor = last(!! rlang::ensym(nome_coluna)))
return(x)
}
day_to_month(selic_diario)
# Convert from dail to monthly and keeps last daily value
day_to_month <- function(base){
nome_coluna <- colnames(base)[2]
x <- base %>%
mutate(mes = lubridate::floor_date(data, "month")) %>%
group_by(mes) %>%
summarise(valor = last(!! rlang::ensym(nome_coluna)))
colnames(x) <- c("data", nome_coluna)
return(x)
}
day_to_month(selic_diario)
selic_mensal <- day_to_month(selic_diario)
# Convert from dail to monthly and keeps last daily value
day_to_month <- function(base){
nome_coluna <- colnames(base)[2]
x <- base %>%
mutate(mes = lubridate::floor_date(data, "month")) %>%
group_by(mes) %>%
summarise(valor = last(!! rlang::ensym(nome_coluna)))
#colnames(x) <- c("data", "valor")
return(x)
}
selic_mensal <- day_to_month(selic_diario)
selic_mensal <- day_to_month(selic_diario) %>% `colnames<-`(c("data", "selic_mensal"))
write_csv2(painel, "Painel de dados.csv")
a <- log(painel)
View(log(dolar_compra_mensal))
View(log(as.matrix(dolar_compra_mensal)))
log(as.matrix(dolar_compra_mensal))
log(painel$dolar_compra_mensal)
log(painel$dolar_venda_mensal)
log(painel[,-1])
log(painel[,-1]) %>% diff()
log(painel[,-1])
log(painel[,2:3])
log(painel[,2:3]) %>% diff()
log(painel[,-1])
View(log(painel[,-1]))
View(painel)
library(caret)
source("~/Bernardo Cainelli Gomes da Silva/Estudo/UFRGS - Ciências Econômicas/09_TCC/forecasts-thesis/01_data.R", echo=TRUE)
View(painel)
?createTimeSlices
?as.formula
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(concrete)
str(concrete)
View(concrete)
View(mixtures)
str(mixtures)
featurePlot(x = concrete[, -9],
y = concrete$CompressiveStrength,
## Add some space between the panels
between = list(x = 1, y = 1),
## Add a background grid ('g') and a smoother ('smooth')
type = c("g", "p", "smooth"))
library(caret)
featurePlot(x = concrete[, -9],
y = concrete$CompressiveStrength,
## Add some space between the panels
between = list(x = 1, y = 1),
## Add a background grid ('g') and a smoother ('smooth')
type = c("g", "p", "smooth"))
concrete[, -9]
View(concrete)
styler:::style_active_file()
averaged <- ddply(
mixtures,
.(
Cement, BlastFurnaceSlag, FlyAsh, Water,
Superplasticizer, CoarseAggregate,
FineAggregate, Age
),
function(x) c(CompressiveStrength = mean(x$CompressiveStrength))
)
library(plyr)
averaged <- ddply(
mixtures,
.(
Cement, BlastFurnaceSlag, FlyAsh, Water,
Superplasticizer, CoarseAggregate,
FineAggregate, Age
),
function(x) c(CompressiveStrength = mean(x$CompressiveStrength))
)
View(averaged)
View(mixtures)
set.seed(975)
forTraining <- createDataPartition(averaged$CompressiveStrength, p = 3 / 4)[[1]]
View(forTraining)
992/3*2
992/2*3
averaged$CompressiveStrength
992*3/4
createDataPartition(averaged$CompressiveStrength, p = 3 / 4)
createDataPartition(averaged$CompressiveStrength, p = 3 / 4)[[1]]
trainingSet <- averaged[forTraining, ]
testSet <- averaged[-forTraining, ]
styler:::style_active_file()
modFormula <- paste(
"CompressiveStrength ~ (.)^2 + I(Cement^2) + ",
"I(BlastFurnaceSlag^2) + I(FlyAsh^2) + I(Water^2) +",
" I(Superplasticizer^2) + I(CoarseAggregate^2) + ",
"I(FineAggregate^2) + I(Age^2)"
)
View(modFormula)
modFormula[1]
modFormula <- as.formula(modFormula)
modFormula
styler:::style_active_file()
styler:::style_active_file()
set.seed(669)
linearReg <- train(modFormula,
data = trainingSet,
method = "lm",
trControl = controlObject
)
# Cross validation setup
controlObject <- trainControl(method = "repeatedcv", repeats = 5, number = 10)
View(controlObject)
controlObject
str(controlObject)
set.seed(669)
linearReg <- train(modFormula,
data = trainingSet,
method = "lm",
trControl = controlObject
)
linearReg
# Algo que rege a formula de modelagem
modFormula <- paste(
"CompressiveStrength ~ (.)^2 + I(Cement^2) + ",
"I(BlastFurnaceSlag^2) + I(FlyAsh^2) + I(Water^2) +",
" I(Superplasticizer^2) + I(CoarseAggregate^2) + ",
"I(FineAggregate^2) + I(Age^2)"
)
modFormula <- as.formula(modFormula)
# Cross validation setup
controlObject <- trainControl(method = "repeatedcv", repeats = 5, number = 10)
set.seed(669)
linearReg <- train(modFormula,
data = trainingSet,
method = "lm",
trControl = controlObject
)
linearReg
View(linearReg)
set.seed(669)
linearReg <- train(form = modFormula,
data = trainingSet,
method = "lm",
trControl = controlObject
)
linearReg
set.seed(669)
linearReg <- train(form = modFormula,
data = trainingSet,
method = "lm",
trControl = controlObject
)
linearReg
linearReg$trainingData
linearReg$modelInfo
linearReg$results
linearReg$pred
linearReg$bestTune
linearReg$call
str(modFormula)
linearReg$resample
summary(linearReg)
summary(linearReg)
styler:::style_active_file()
set.seed(669)
svmRModel <- train(CompressiveStrength ~ .,
data = trainingSet,
method = "svmRadial",
tuneLength = 15,
preProc = c("center", "scale"),
trControl = controlObject
)
summary(svmRModel)
svmRModel
svmRModel$coefnames
linearReg$coefnames
## Plot the RMSE values
parallelPlot(allResamples)
??xyplot
library(lattice)
## Plot the RMSE values
parallelplot(allResamples)
allResamples <- resamples(list("Linear Reg" = lmModel,
SVM = svmRModel))
allResamples <- resamples(list(linearReg = lmModel,
SVM = svmRModel))
allResamples <- resamples(list(lmModel = linearReg,
SVM = svmRModel))
## Plot the RMSE values
parallelplot(allResamples)
## Using R-squared:
parallelplot(allResamples, metric = "Rsquared")
# Previsões
Prev_lm <- predict(linearReg, testSet)
Prev_svm <- predict(svmRModel, testSet)
Prev_svm
allResamples$call
allResamples$values
allResamples$models
allResamples$metrics
allResamples$timings
allResamples$methods
allResamples
svmRModel$finalModel
set.seed(669)
lasso <- train(
form = modFormula,
data = trainingSet,
method = "lasso",
trControl = controlObject
)
summary(lasso)
lasso$coefnames
lasso$modelInfo
lasso$xlevels
lasso$levels
lasso$results
lasso
plot(lasso)
plot(varImp(lasso))
allResamples <- resamples(list(lmModel = linearReg,
SVM = svmRModel,
lasso = lasso))
## Plot the RMSE values
parallelplot(allResamples)
## Using R-squared:
parallelplot(allResamples, metric = "Rsquared")
coefficients(lasso)
lasso$coefnames
lasso$finalModel
source("~/Bernardo Cainelli Gomes da Silva/Estudo/UFRGS - Ciências Econômicas/09_TCC/forecasts-thesis/01_data.R", echo=TRUE)
View(painel)
data <- painel[,-c(1:2)]
View(data)
View(painel)
library(caret)
sample <- createTimeSlices(y = data, initialWindow = 120, horizon = 12, fixedWindow = TRUE)
str(data)
sample <- createTimeSlices(y = painel, initialWindow = 120, horizon = 12, fixedWindow = TRUE)
sample <- createTimeSlices(y = data, initialWindow = 12, horizon = 12, fixedWindow = TRUE)
lenght(data)
length(data)
length(as.matrix(data))
sample <- createTimeSlices(y = as.matrix(data), initialWindow = 120, horizon = 12, fixedWindow = TRUE)
as.matrix(data)
View(data)
View(painel)
painel <- reduce(list(dolar_compra_mensal, dolar_venda_mensal, M1_mensal,inflacao_mensal, selic_mensal, pib_mensal),full_join, by = "data")
View(painel)
painel <- painel[rowSums(is.na(painel)) == 0,]
data <- painel[,-c(1:2)]
sample <- createTimeSlices(y = as.matrix(data), initialWindow = 120, horizon = 12, fixedWindow = TRUE)
View(sample)
sample$train
View(sample)
sample$test
View(data)
data_train <- data[sample$train,]
sample$train[1]
sample$train[2]
sample$train[-1]
sample$train[[1]]
data_train <- data[sample$train[[1]],]
View(data_train)
painel <- reduce(list(dolar_compra_mensal, dolar_venda_mensal, M1_mensal,inflacao_mensal, selic_mensal, pib_mensal),full_join, by = "data")
painel <- painel[rowSums(is.na(painel)) == 0,]
rownames(painel) = seq(length=nrow(painel))
View(painel)
data <- painel[,-c(1:2)]
sample <- createTimeSlices(y = as.matrix(data), initialWindow = 120, horizon = 12, fixedWindow = TRUE)
data_train <- data[sample$train[[1]],]
View(data_train)
data_test <- data[sample$test[[1]],]
View(data_test)
?trainControl
sample[[1]]
source("~/Bernardo Cainelli Gomes da Silva/Estudo/UFRGS - Ciências Econômicas/09_TCC/forecasts-thesis/02_models.R", echo=TRUE)
Prev_lm <- predict(model_lm, tail(data))
Prev_lm
tail(data)
tail(data, 1)
View(painel)
View(data)
gitcreds::gitcreds_set()
install.packages("gitcreds")
gitcreds::gitcreds_set()
?svm
# TCC forecast: train models
# Bernardo Cainelli Gomes da Silva
# Fev - 2023
# _________________________________________________________________________________
# _____________________________ HELPER FUNCTIONS __________________________________
# _________________________________________________________________________________
source("00_functions.R")
source("01_data.R")
library(caret)
library(doParallel)
# _________________________________________________________________________________
# _____________________________ PREPROCESS DATA ___________________________________
# _________________________________________________________________________________
data <- painel[,-c(1:2)]
install.packages("recipes")
install.packages("recipes")
?model.matrix
library(earth)
data(etitanic)
head(model.matrix(survived ~ ., data = etitanic))
View(etitanic)
# TCC forecast: train models
# Bernardo Cainelli Gomes da Silva
# Fev - 2023
# _________________________________________________________________________________
# _____________________________ HELPER FUNCTIONS __________________________________
# _________________________________________________________________________________
source("00_functions.R")
source("01_data.R")
library(caret)
library(doParallel)
# _________________________________________________________________________________
# _____________________________ PREPROCESS DATA ___________________________________
# _________________________________________________________________________________
data <- painel[,-c(1:2)]
View(painel)
View(data)
View(painel)
source("~/.active-rstudio-document", echo=TRUE)
install.packages("QSARdata")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
View(tox)
## Add the outcome variable to the data frame
tox$Activity <- AquaticTox_Outcome$Activity
View(tox)
tox <- tox %>%
select(-Molecule) %>%
## Suppose the easy of manufacturability is
## related to the molecular weight of the compound
mutate(manufacturability  = 1/moe2D_Weight) %>%
mutate(manufacturability = manufacturability/sum(manufacturability))
tox %>%
select(-Molecule)
